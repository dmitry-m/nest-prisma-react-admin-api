generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  name     String?
  avatar   String?
  role     String?  @default("user")
  is_admin Boolean? @default(false)
}

model Customers {
  id              Int        @id @default(autoincrement())
  first_name      String
  last_name       String
  email           String     @unique
  password        String     @default("")
  address         String?    @default("")
  zipcode         String?    @default("")
  city            String?    @default("")
  avatar          String?    @default("")
  birthday        DateTime?  @default(now())
  first_seen      DateTime?  @default(now())
  last_seen       DateTime?  @default(now())
  has_ordered     Boolean?   @default(false)
  stateAbbr       String?    @default("")
  latest_purchase DateTime?
  has_newsletter  Boolean?   @default(true)
  groups          String[]   @default([])
  nb_commands     Int?       @default(0)
  total_spent     Int?       @default(0)
  commands        Commands[]
  invoices        Invoices[]
  reviews         Reviews[]
}

model Categories {
  id       Int        @id @default(autoincrement())
  name     String
  products Products[]
}

model Products {
  id          Int        @id @default(autoincrement())
  category_id Int
  category    Categories @relation(fields: [category_id], references: [id])
  reference   String
  width       Int
  height      Int
  price       Int
  thumbnail   String
  image       String
  description String?    @default("")
  stock       Int
  sales       Int?       @default(0)
  Reviews     Reviews[]
}

model Commands {
  id             Int            @id @default(autoincrement())
  reference      String
  date           DateTime?      @default(now())
  customer_id    Int
  customer       Customers      @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  basket         Json
  total_ex_taxes Int
  delivery_fees  Int
  tax_rate       Int
  taxes          Int
  total          Int
  status         CommandsStatus @default(ORDERED)
  returned       Boolean        @default(false)
  Invoices       Invoices?
  Reviews        Reviews[]
}

model Invoices {
  id             Int       @id @default(autoincrement())
  date           DateTime  @default(now())
  command_id     Int       @unique
  command        Commands  @relation(fields: [command_id], references: [id])
  customer_id    Int       @unique
  customer       Customers @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  total_ex_taxes Int
  delivery_fees  Int
  tax_rate       Int
  taxes          Int
  total          Int
}

model Reviews {
  id          Int          @id @default(autoincrement())
  date        DateTime     @default(now())
  status      ReviewStatus @default(PENDING)
  command_id  Int          @unique
  command     Commands     @relation(fields: [command_id], references: [id])
  product_id  Int          @unique
  product     Products     @relation(fields: [product_id], references: [id])
  customer_id Int          @unique
  customer    Customers    @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  rating      Int
  comment     String
}

enum ReviewStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum CommandsStatus {
  ORDERED
  DELIVERED
  REVOKED
}
